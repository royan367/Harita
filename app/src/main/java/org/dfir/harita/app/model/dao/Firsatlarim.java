package org.dfir.harita.app.model.dao;

import org.dfir.harita.app.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table FIRSATLARIM.
 */
public class Firsatlarim {

    private Long id;
    private Long firsat_id;
    private Integer sure;
    private Boolean yararlanildi_mi;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FirsatlarimDao myDao;

    private Firsat firsat;
    private Long firsat__resolvedKey;


    public Firsatlarim() {
    }

    public Firsatlarim(Long id) {
        this.id = id;
    }

    public Firsatlarim(Long id, Long firsat_id, Integer sure, Boolean yararlanildi_mi) {
        this.id = id;
        this.firsat_id = firsat_id;
        this.sure = sure;
        this.yararlanildi_mi = yararlanildi_mi;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFirsatlarimDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getFirsat_id() {
        return firsat_id;
    }

    public void setFirsat_id(Long firsat_id) {
        this.firsat_id = firsat_id;
    }

    public Integer getSure() {
        return sure;
    }

    public void setSure(Integer sure) {
        this.sure = sure;
    }

    public Boolean getYararlanildi_mi() {
        return yararlanildi_mi;
    }

    public void setYararlanildi_mi(Boolean yararlanildi_mi) {
        this.yararlanildi_mi = yararlanildi_mi;
    }

    /** To-one relationship, resolved on first access. */
    public Firsat getFirsat() {
        Long __key = this.firsat_id;
        if (firsat__resolvedKey == null || !firsat__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FirsatDao targetDao = daoSession.getFirsatDao();
            Firsat firsatNew = targetDao.load(__key);
            synchronized (this) {
                firsat = firsatNew;
            	firsat__resolvedKey = __key;
            }
        }
        return firsat;
    }

    public void setFirsat(Firsat firsat) {
        synchronized (this) {
            this.firsat = firsat;
            firsat_id = firsat == null ? null : firsat.getId();
            firsat__resolvedKey = firsat_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
