package org.dfir.harita.app.model.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.dfir.harita.app.model.dao.Firsat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FIRSAT.
*/
public class FirsatDao extends AbstractDao<Firsat, Long> {

    public static final String TABLENAME = "FIRSAT";

    /**
     * Properties of entity Firsat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Isletme_id = new Property(1, Long.class, "isletme_id", false, "ISLETME_ID");
        public final static Property Baslangic = new Property(2, java.util.Date.class, "baslangic", false, "BASLANGIC");
        public final static Property Sure = new Property(3, Integer.class, "sure", false, "SURE");
        public final static Property Kac_kisi = new Property(4, Integer.class, "kac_kisi", false, "KAC_KISI");
        public final static Property Aciklama = new Property(5, String.class, "aciklama", false, "ACIKLAMA");
        public final static Property Aktif_mi = new Property(6, Boolean.class, "aktif_mi", false, "AKTIF_MI");
        public final static Property Firsat_turu = new Property(7, String.class, "firsat_turu", false, "FIRSAT_TURU");
        public final static Property Firsat_kodu = new Property(8, String.class, "firsat_kodu", false, "FIRSAT_KODU");
        public final static Property Kategori = new Property(9, String.class, "kategori", false, "KATEGORI");
    };

    private DaoSession daoSession;

    private Query<Firsat> isletme_FirsatlarQuery;

    public FirsatDao(DaoConfig config) {
        super(config);
    }
    
    public FirsatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FIRSAT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ISLETME_ID' INTEGER," + // 1: isletme_id
                "'BASLANGIC' INTEGER," + // 2: baslangic
                "'SURE' INTEGER," + // 3: sure
                "'KAC_KISI' INTEGER," + // 4: kac_kisi
                "'ACIKLAMA' TEXT," + // 5: aciklama
                "'AKTIF_MI' INTEGER," + // 6: aktif_mi
                "'FIRSAT_TURU' TEXT," + // 7: firsat_turu
                "'FIRSAT_KODU' TEXT," + // 8: firsat_kodu
                "'KATEGORI' TEXT);"); // 9: kategori
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FIRSAT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Firsat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long isletme_id = entity.getIsletme_id();
        if (isletme_id != null) {
            stmt.bindLong(2, isletme_id);
        }
 
        java.util.Date baslangic = entity.getBaslangic();
        if (baslangic != null) {
            stmt.bindLong(3, baslangic.getTime());
        }
 
        Integer sure = entity.getSure();
        if (sure != null) {
            stmt.bindLong(4, sure);
        }
 
        Integer kac_kisi = entity.getKac_kisi();
        if (kac_kisi != null) {
            stmt.bindLong(5, kac_kisi);
        }
 
        String aciklama = entity.getAciklama();
        if (aciklama != null) {
            stmt.bindString(6, aciklama);
        }
 
        Boolean aktif_mi = entity.getAktif_mi();
        if (aktif_mi != null) {
            stmt.bindLong(7, aktif_mi ? 1l: 0l);
        }
 
        String firsat_turu = entity.getFirsat_turu();
        if (firsat_turu != null) {
            stmt.bindString(8, firsat_turu);
        }
 
        String firsat_kodu = entity.getFirsat_kodu();
        if (firsat_kodu != null) {
            stmt.bindString(9, firsat_kodu);
        }
 
        String kategori = entity.getKategori();
        if (kategori != null) {
            stmt.bindString(10, kategori);
        }
    }

    @Override
    protected void attachEntity(Firsat entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Firsat readEntity(Cursor cursor, int offset) {
        Firsat entity = new Firsat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // isletme_id
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // baslangic
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // sure
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // kac_kisi
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // aciklama
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // aktif_mi
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // firsat_turu
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // firsat_kodu
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // kategori
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Firsat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsletme_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBaslangic(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setSure(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setKac_kisi(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAciklama(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAktif_mi(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setFirsat_turu(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFirsat_kodu(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKategori(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Firsat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Firsat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "firsatlar" to-many relationship of Isletme. */
    public List<Firsat> _queryIsletme_Firsatlar(Long isletme_id) {
        synchronized (this) {
            if (isletme_FirsatlarQuery == null) {
                QueryBuilder<Firsat> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Isletme_id.eq(null));
                isletme_FirsatlarQuery = queryBuilder.build();
            }
        }
        Query<Firsat> query = isletme_FirsatlarQuery.forCurrentThread();
        query.setParameter(0, isletme_id);
        return query.list();
    }

}
