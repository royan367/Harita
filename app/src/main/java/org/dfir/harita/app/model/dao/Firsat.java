package org.dfir.harita.app.model.dao;

import java.util.List;
import org.dfir.harita.app.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table FIRSAT.
 */
public class Firsat {

    private Long id;
    private Long isletme_id;
    private java.util.Date baslangic;
    private Integer sure;
    private Integer kac_kisi;
    private String aciklama;
    private Boolean aktif_mi;
    private String firsat_turu;
    private String firsat_kodu;
    private String kategori;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FirsatDao myDao;

    private List<Musteri_Firsat> musteriFirsatlar;
    private List<Firsatlarim> firsatlarimListesi;

    public Firsat() {
    }

    public Firsat(Long id) {
        this.id = id;
    }

    public Firsat(Long id, Long isletme_id, java.util.Date baslangic, Integer sure, Integer kac_kisi, String aciklama, Boolean aktif_mi, String firsat_turu, String firsat_kodu, String kategori) {
        this.id = id;
        this.isletme_id = isletme_id;
        this.baslangic = baslangic;
        this.sure = sure;
        this.kac_kisi = kac_kisi;
        this.aciklama = aciklama;
        this.aktif_mi = aktif_mi;
        this.firsat_turu = firsat_turu;
        this.firsat_kodu = firsat_kodu;
        this.kategori = kategori;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFirsatDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getIsletme_id() {
        return isletme_id;
    }

    public void setIsletme_id(Long isletme_id) {
        this.isletme_id = isletme_id;
    }

    public java.util.Date getBaslangic() {
        return baslangic;
    }

    public void setBaslangic(java.util.Date baslangic) {
        this.baslangic = baslangic;
    }

    public Integer getSure() {
        return sure;
    }

    public void setSure(Integer sure) {
        this.sure = sure;
    }

    public Integer getKac_kisi() {
        return kac_kisi;
    }

    public void setKac_kisi(Integer kac_kisi) {
        this.kac_kisi = kac_kisi;
    }

    public String getAciklama() {
        return aciklama;
    }

    public void setAciklama(String aciklama) {
        this.aciklama = aciklama;
    }

    public Boolean getAktif_mi() {
        return aktif_mi;
    }

    public void setAktif_mi(Boolean aktif_mi) {
        this.aktif_mi = aktif_mi;
    }

    public String getFirsat_turu() {
        return firsat_turu;
    }

    public void setFirsat_turu(String firsat_turu) {
        this.firsat_turu = firsat_turu;
    }

    public String getFirsat_kodu() {
        return firsat_kodu;
    }

    public void setFirsat_kodu(String firsat_kodu) {
        this.firsat_kodu = firsat_kodu;
    }

    public String getKategori() {
        return kategori;
    }

    public void setKategori(String kategori) {
        this.kategori = kategori;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Musteri_Firsat> getMusteriFirsatlar() {
        if (musteriFirsatlar == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Musteri_FirsatDao targetDao = daoSession.getMusteri_FirsatDao();
            List<Musteri_Firsat> musteriFirsatlarNew = targetDao._queryFirsat_MusteriFirsatlar(id);
            synchronized (this) {
                if(musteriFirsatlar == null) {
                    musteriFirsatlar = musteriFirsatlarNew;
                }
            }
        }
        return musteriFirsatlar;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMusteriFirsatlar() {
        musteriFirsatlar = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Firsatlarim> getFirsatlarimListesi() {
        if (firsatlarimListesi == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FirsatlarimDao targetDao = daoSession.getFirsatlarimDao();
            List<Firsatlarim> firsatlarimListesiNew = targetDao._queryFirsat_FirsatlarimListesi(id);
            synchronized (this) {
                if(firsatlarimListesi == null) {
                    firsatlarimListesi = firsatlarimListesiNew;
                }
            }
        }
        return firsatlarimListesi;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFirsatlarimListesi() {
        firsatlarimListesi = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
