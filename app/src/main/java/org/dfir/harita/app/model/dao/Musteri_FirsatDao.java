package org.dfir.harita.app.model.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.dfir.harita.app.model.dao.Musteri_Firsat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MUSTERI__FIRSAT.
*/
public class Musteri_FirsatDao extends AbstractDao<Musteri_Firsat, Long> {

    public static final String TABLENAME = "MUSTERI__FIRSAT";

    /**
     * Properties of entity Musteri_Firsat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Musteri_id = new Property(1, Long.class, "musteri_id", false, "MUSTERI_ID");
        public final static Property Firsat_id = new Property(2, Long.class, "firsat_id", false, "FIRSAT_ID");
    };

    private DaoSession daoSession;

    private Query<Musteri_Firsat> firsat_MusteriFirsatlarQuery;
    private Query<Musteri_Firsat> musteri_MusteriFirsatlarQuery;

    public Musteri_FirsatDao(DaoConfig config) {
        super(config);
    }
    
    public Musteri_FirsatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MUSTERI__FIRSAT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MUSTERI_ID' INTEGER," + // 1: musteri_id
                "'FIRSAT_ID' INTEGER);"); // 2: firsat_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MUSTERI__FIRSAT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Musteri_Firsat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long musteri_id = entity.getMusteri_id();
        if (musteri_id != null) {
            stmt.bindLong(2, musteri_id);
        }
 
        Long firsat_id = entity.getFirsat_id();
        if (firsat_id != null) {
            stmt.bindLong(3, firsat_id);
        }
    }

    @Override
    protected void attachEntity(Musteri_Firsat entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Musteri_Firsat readEntity(Cursor cursor, int offset) {
        Musteri_Firsat entity = new Musteri_Firsat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // musteri_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // firsat_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Musteri_Firsat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMusteri_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFirsat_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Musteri_Firsat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Musteri_Firsat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "musteriFirsatlar" to-many relationship of Firsat. */
    public List<Musteri_Firsat> _queryFirsat_MusteriFirsatlar(Long firsat_id) {
        synchronized (this) {
            if (firsat_MusteriFirsatlarQuery == null) {
                QueryBuilder<Musteri_Firsat> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Firsat_id.eq(null));
                firsat_MusteriFirsatlarQuery = queryBuilder.build();
            }
        }
        Query<Musteri_Firsat> query = firsat_MusteriFirsatlarQuery.forCurrentThread();
        query.setParameter(0, firsat_id);
        return query.list();
    }

    /** Internal query to resolve the "musteriFirsatlar" to-many relationship of Musteri. */
    public List<Musteri_Firsat> _queryMusteri_MusteriFirsatlar(Long musteri_id) {
        synchronized (this) {
            if (musteri_MusteriFirsatlarQuery == null) {
                QueryBuilder<Musteri_Firsat> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Musteri_id.eq(null));
                musteri_MusteriFirsatlarQuery = queryBuilder.build();
            }
        }
        Query<Musteri_Firsat> query = musteri_MusteriFirsatlarQuery.forCurrentThread();
        query.setParameter(0, musteri_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMusteriDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getFirsatDao().getAllColumns());
            builder.append(" FROM MUSTERI__FIRSAT T");
            builder.append(" LEFT JOIN MUSTERI T0 ON T.'MUSTERI_ID'=T0.'_id'");
            builder.append(" LEFT JOIN FIRSAT T1 ON T.'FIRSAT_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Musteri_Firsat loadCurrentDeep(Cursor cursor, boolean lock) {
        Musteri_Firsat entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Musteri musteri = loadCurrentOther(daoSession.getMusteriDao(), cursor, offset);
        entity.setMusteri(musteri);
        offset += daoSession.getMusteriDao().getAllColumns().length;

        Firsat firsat = loadCurrentOther(daoSession.getFirsatDao(), cursor, offset);
        entity.setFirsat(firsat);

        return entity;    
    }

    public Musteri_Firsat loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Musteri_Firsat> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Musteri_Firsat> list = new ArrayList<Musteri_Firsat>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Musteri_Firsat> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Musteri_Firsat> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
