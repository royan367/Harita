package org.dfir.harita.app.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.dfir.harita.app.model.dao.Isletme;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ISLETME.
*/
public class IsletmeDao extends AbstractDao<Isletme, Long> {

    public static final String TABLENAME = "ISLETME";

    /**
     * Properties of entity Isletme.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ad = new Property(1, String.class, "ad", false, "AD");
        public final static Property Enlem = new Property(2, Double.class, "enlem", false, "ENLEM");
        public final static Property Boylam = new Property(3, Double.class, "boylam", false, "BOYLAM");
        public final static Property Adres = new Property(4, String.class, "adres", false, "ADRES");
        public final static Property Oy = new Property(5, Float.class, "oy", false, "OY");
        public final static Property Aciklama = new Property(6, String.class, "aciklama", false, "ACIKLAMA");
        public final static Property Kullanici_adi = new Property(7, String.class, "kullanici_adi", false, "KULLANICI_ADI");
        public final static Property Sifre = new Property(8, String.class, "sifre", false, "SIFRE");
        public final static Property Kategori = new Property(9, String.class, "kategori", false, "KATEGORI");
    };

    private DaoSession daoSession;


    public IsletmeDao(DaoConfig config) {
        super(config);
    }
    
    public IsletmeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ISLETME' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'AD' TEXT," + // 1: ad
                "'ENLEM' REAL," + // 2: enlem
                "'BOYLAM' REAL," + // 3: boylam
                "'ADRES' TEXT," + // 4: adres
                "'OY' REAL," + // 5: oy
                "'ACIKLAMA' TEXT," + // 6: aciklama
                "'KULLANICI_ADI' TEXT," + // 7: kullanici_adi
                "'SIFRE' TEXT," + // 8: sifre
                "'KATEGORI' TEXT);"); // 9: kategori
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ISLETME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Isletme entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ad = entity.getAd();
        if (ad != null) {
            stmt.bindString(2, ad);
        }
 
        Double enlem = entity.getEnlem();
        if (enlem != null) {
            stmt.bindDouble(3, enlem);
        }
 
        Double boylam = entity.getBoylam();
        if (boylam != null) {
            stmt.bindDouble(4, boylam);
        }
 
        String adres = entity.getAdres();
        if (adres != null) {
            stmt.bindString(5, adres);
        }
 
        Float oy = entity.getOy();
        if (oy != null) {
            stmt.bindDouble(6, oy);
        }
 
        String aciklama = entity.getAciklama();
        if (aciklama != null) {
            stmt.bindString(7, aciklama);
        }
 
        String kullanici_adi = entity.getKullanici_adi();
        if (kullanici_adi != null) {
            stmt.bindString(8, kullanici_adi);
        }
 
        String sifre = entity.getSifre();
        if (sifre != null) {
            stmt.bindString(9, sifre);
        }
 
        String kategori = entity.getKategori();
        if (kategori != null) {
            stmt.bindString(10, kategori);
        }
    }

    @Override
    protected void attachEntity(Isletme entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Isletme readEntity(Cursor cursor, int offset) {
        Isletme entity = new Isletme( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ad
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // enlem
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // boylam
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // adres
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // oy
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // aciklama
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // kullanici_adi
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sifre
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // kategori
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Isletme entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAd(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEnlem(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setBoylam(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setAdres(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOy(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setAciklama(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setKullanici_adi(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSifre(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKategori(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Isletme entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Isletme entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
