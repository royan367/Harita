package org.dfir.harita.app.model.dao;

import java.util.List;
import org.dfir.harita.app.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ISLETME.
 */
public class Isletme {

    private Long id;
    private String ad;
    private Double enlem;
    private Double boylam;
    private String adres;
    private Float oy;
    private String aciklama;
    private String kullanici_adi;
    private String sifre;
    private String kategori;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient IsletmeDao myDao;

    private List<Firsat> firsatlar;
    private List<Musteri_Isletme> musteriIsletmeler;

    public Isletme() {
    }

    public Isletme(Long id) {
        this.id = id;
    }

    public Isletme(Long id, String ad, Double enlem, Double boylam, String adres, Float oy, String aciklama, String kullanici_adi, String sifre, String kategori) {
        this.id = id;
        this.ad = ad;
        this.enlem = enlem;
        this.boylam = boylam;
        this.adres = adres;
        this.oy = oy;
        this.aciklama = aciklama;
        this.kullanici_adi = kullanici_adi;
        this.sifre = sifre;
        this.kategori = kategori;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getIsletmeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getAd() {
        return ad;
    }

    public void setAd(String ad) {
        this.ad = ad;
    }

    public Double getEnlem() {
        return enlem;
    }

    public void setEnlem(Double enlem) {
        this.enlem = enlem;
    }

    public Double getBoylam() {
        return boylam;
    }

    public void setBoylam(Double boylam) {
        this.boylam = boylam;
    }

    public String getAdres() {
        return adres;
    }

    public void setAdres(String adres) {
        this.adres = adres;
    }

    public Float getOy() {
        return oy;
    }

    public void setOy(Float oy) {
        this.oy = oy;
    }

    public String getAciklama() {
        return aciklama;
    }

    public void setAciklama(String aciklama) {
        this.aciklama = aciklama;
    }

    public String getKullanici_adi() {
        return kullanici_adi;
    }

    public void setKullanici_adi(String kullanici_adi) {
        this.kullanici_adi = kullanici_adi;
    }

    public String getSifre() {
        return sifre;
    }

    public void setSifre(String sifre) {
        this.sifre = sifre;
    }

    public String getKategori() {
        return kategori;
    }

    public void setKategori(String kategori) {
        this.kategori = kategori;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Firsat> getFirsatlar() {
        if (firsatlar == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FirsatDao targetDao = daoSession.getFirsatDao();
            List<Firsat> firsatlarNew = targetDao._queryIsletme_Firsatlar(id);
            synchronized (this) {
                if(firsatlar == null) {
                    firsatlar = firsatlarNew;
                }
            }
        }
        return firsatlar;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFirsatlar() {
        firsatlar = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Musteri_Isletme> getMusteriIsletmeler() {
        if (musteriIsletmeler == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Musteri_IsletmeDao targetDao = daoSession.getMusteri_IsletmeDao();
            List<Musteri_Isletme> musteriIsletmelerNew = targetDao._queryIsletme_MusteriIsletmeler(id);
            synchronized (this) {
                if(musteriIsletmeler == null) {
                    musteriIsletmeler = musteriIsletmelerNew;
                }
            }
        }
        return musteriIsletmeler;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMusteriIsletmeler() {
        musteriIsletmeler = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
