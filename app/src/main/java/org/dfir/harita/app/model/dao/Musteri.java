package org.dfir.harita.app.model.dao;

import java.util.List;
import org.dfir.harita.app.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MUSTERI.
 */
public class Musteri {

    private Long id;
    private Float oy;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MusteriDao myDao;

    private List<Musteri_Isletme> musteriIsletmeler;
    private List<Musteri_Firsat> musteriFirsatlar;

    public Musteri() {
    }

    public Musteri(Long id) {
        this.id = id;
    }

    public Musteri(Long id, Float oy) {
        this.id = id;
        this.oy = oy;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMusteriDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Float getOy() {
        return oy;
    }

    public void setOy(Float oy) {
        this.oy = oy;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Musteri_Isletme> getMusteriIsletmeler() {
        if (musteriIsletmeler == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Musteri_IsletmeDao targetDao = daoSession.getMusteri_IsletmeDao();
            List<Musteri_Isletme> musteriIsletmelerNew = targetDao._queryMusteri_MusteriIsletmeler(id);
            synchronized (this) {
                if(musteriIsletmeler == null) {
                    musteriIsletmeler = musteriIsletmelerNew;
                }
            }
        }
        return musteriIsletmeler;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMusteriIsletmeler() {
        musteriIsletmeler = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Musteri_Firsat> getMusteriFirsatlar() {
        if (musteriFirsatlar == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Musteri_FirsatDao targetDao = daoSession.getMusteri_FirsatDao();
            List<Musteri_Firsat> musteriFirsatlarNew = targetDao._queryMusteri_MusteriFirsatlar(id);
            synchronized (this) {
                if(musteriFirsatlar == null) {
                    musteriFirsatlar = musteriFirsatlarNew;
                }
            }
        }
        return musteriFirsatlar;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMusteriFirsatlar() {
        musteriFirsatlar = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
